// !Прототипы наследия
// ?Прототипы обьекта

// https://miro.com/app/board/o9J_ku0WE0g=/
// Object.create()
// [[Prototype]] и __proto__
// Object.getPrototypeOf()
// Собственные совойстав и Object.prototype.hasOwnProperty()
// Цепочка прототипов

// const objC = {
//    b: 10,
// };

// const objB = Object.create(objC);
// objB.y = 15;

// const objA = Object.create(objB);
// objA.x = 5;

// console.log(objA.b);

// console.log('objA', objA);

// console.log(objA.hasOwnProperty('x'));
// *!________________________________________________________________*
// Это собственное совойство обьекта
// Это свойство на обьекте прототипе

// const dummyObj = Object.create({message: "Это свойство на обьекте прототипе"});
// dummyObj.message = "Это собственное совойство обьекта";
// console.log('dummyObj', dummyObj);

// console.log(dummyObj.message);
  
// *!________________________________________________________________*
// ?Алкоритм поиска свойств в цепочке прототипов
// 1. Поиск начинаеться в собственных свойствах
// 2. Если свосйства НЕТ в сообственных, поиск преходит в цепочку к цепочке прототипов
// 3. Посиск прекращаеться при первом совподенни(есть такое совойство)
// 4. Возращаеться значения свойства

// const objA = Object.create({ b: 10 });
// objA.y = 15;
// console.log('objA', objA);

// console.log(objA.x);
// *!________________________________________________________________*
// !Основы ООП: класс, экземпляр(обьект), интерфейс

// ?Функции конструкторы
// Именование
// Оператор new
// Свойство Function.prototype

// *!________________________________________________________________*
// 1.Если функция вызывается через new, создаеться пустой обьект
// 2.Функция вызывается в контексте созданного обьекта, то есть в this ссылка на него
// 3.В свойство this.__proto__записываеться ссылка на обьект Car.prototype
// тоесть Car.prototype это ПРОТОТИП будущего обьекта(экземпляра)
// 4.Ссылка обьект возращается в метсо вызова new Car

// brand: 'Audi'
// model: 'Q3',
// price: 35000

// brand: 'Audi'
// model: 'A6',
// price: 75000

// brand: 'BMW'
// model: 'X5',
// price: 90000
// *!________________________________________________________________*
// Статистика свойства и методы
// Статистика свойства и методы доступны только на самом конструкторы
// В статистики методах нет this

// *!________________________________________________________________*